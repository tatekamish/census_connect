# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CensusConnect
                                 A QGIS plugin
 This plugin downloads and joins census attribute data with census spatial data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-02-27
        copyright            : (C) 2022 by Friendly Widgetmakers Society
        email                : stephen.francisco@temple.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Friendly Widgetmakers Society'
__date__ = '2022-02-27'
__copyright__ = '(C) 2022 by Friendly Widgetmakers Society'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsVectorLayer,
                       QgsVectorFileWriter,
                       QgsProject,
                       QgsVectorLayerJoinInfo,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterString,
                       QgsProcessingOutputString,
                       Qgis
                       )
from qgis.utils import iface
from qgis import processing


import sys
import os
import pandas as pd
import requests
from csv import QUOTE_NONNUMERIC
import urllib.request, urllib.error, urllib.parse


# appending a path
sys.path.append(r"C:\Users\tuo27112\AppData\Roaming\QGIS\QGIS3\profiles\default\python\plugins\get_census")
  
# importing required module
import cc_functions as cc

class CensusConnectAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    
    
    EXTENT_PARAM = 'EXTENT_PARAM'
    EXTENT_OUTPUT = 'EXTENT_OUTPUT'
    
    LEVEL_PARAM = 'LEVEL_PARAM'
    LEVEL_OUTPUT = 'LEVEL_OUTPUT'
    
    TABLE_PARAM = 'TABLE_PARAM'
    TABLE_OUTPUT = 'TABLE_OUTPUT'
    
    YEAR_PARAM = 'YEAR_PARAM'
    YEAR_OUTPUT = 'YEAR_OUTPUT'
    
    TABLE_NAME_PARAM = 'TABLE_NAME_PARAM'
    TABLE_NAME_OUTPUT = 'TABLE_NAME_OUTPUT'
    
    EXTENT = ['Alabama',
    'Alaska',
    'Arizona',
    'Arkansas',
    'California',
    'Colorado',
    'Connecticut',
    'Delaware',
    'Florida',
    'Georgia',
    'Hawaii',
    'Idaho',
    'Illinois',
    'Indiana',
    'Iowa',
    'Kansas',
    'Kentucky',
    'Louisiana',
    'Maine',
    'Maryland',
    'Massachusetts',
    'Michigan',
    'Minnesota',
    'Mississippi',
    'Missouri',
    'Montana',
    'Nebraska',
    'Nevada',
    'New Hampshire',
    'New Jersey',
    'New Mexico',
    'New York',
    'North Carolina',
    'North Dakota',
    'Ohio',
    'Oklahoma',
    'Oregon',
    'Pennsylvania',
    'Rhode Island',
    'South Carolina',
    'South Dakota',
    'Tennessee',
    'Texas',
    'Utah',
    'Vermont',
    'Virginia',
    'Washington',
    'West Virginia',
    'Wisconsin',
    'Wyoming',
    'American Samoa',
    'Guam',
    'Northern Mariana Islands',
    'Puerto Rico',
    'Virgin Islands']
    EXTENT_RESPONSE = ['01','02','04','05','06','08','09','10','12','13','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','44','45','46','47','48','49','50','51','53','54','55','56','60','66','69','72','78']
    
    YEAR = ['2000','2010']
    YEAR_RESPONSE = ['2000','2010']
    
    LEVEL = ['All Counties', 'All Census Tracts']
    LEVEL_RESPONSE = ['county', 'tract']
    
    

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """    
        
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.EXTENT_PARAM,
                description="Choose a Geographic Extent",
                options=self.EXTENT
            )
        )
        
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.LEVEL_PARAM,
                description="Choose a Geographic level",
                options=self.LEVEL
            )
        )
        
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.YEAR_PARAM,
                description="Choose a Year",
                options=self.YEAR
            )
        )
        
        self.addParameter(
            QgsProcessingParameterString(
                name=self.TABLE_PARAM,
                description="Enter your census table number",
            )
        )
        
        self.addParameter(
            QgsProcessingParameterString(
                name=self.TABLE_NAME_PARAM,
                description="Enter your preferred table name",
            )
        )
        
        
    
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
    
        """
        
        project_home = QgsProject.instance().absolutePath()
        
        extent = self.EXTENT_RESPONSE[self.parameterAsInt(parameters, self.EXTENT_PARAM, context)]
        level = self.LEVEL_RESPONSE[self.parameterAsInt(parameters, self.LEVEL_PARAM, context)]  
        table = self.parameterAsString(parameters, self.TABLE_PARAM, context)
        year = self.YEAR_RESPONSE[self.parameterAsInt(parameters, self.YEAR_PARAM, context)]
        table_name = self.parameterAsString(parameters, self.TABLE_NAME_PARAM, context)
        
        # call get_table to download table from Census API
        table_name = cc.get_table([table], level, extent, year)
        
        # add csv to QGIS project
        csv_path = os.path.join('file://', project_home, f"{table_name}.csv")
        csv = QgsVectorLayer(csv_path, 'table', 'delimitedtext')
        QgsProject.instance().addMapLayer(csv)
        
        # call geo_url to get geography file
        geo_url, url_suffix, shp_join_field  = cc.get_geo(level, year, extent)

        # add shapefile to QGIS project
        zip_path = os.path.join('/vsizip/', project_home, os.path.basename(geo_url), url_suffix[:-4] + '.shp')
        # zip_path = '/vsizip/' + project_home + os.path.basename(geo_url)
        shp = QgsVectorLayer(zip_path, url_suffix[:-4], 'ogr')
        QgsProject.instance().addMapLayer(shp)

        # call join_to_geog to join csv to geography file
        cc.join_to_geog(shp, csv, shp_join_field)
                
        return {self.EXTENT_OUTPUT: extent, self.LEVEL_OUTPUT: level, self.TABLE_OUTPUT: table, self.YEAR_OUTPUT: year, self.TABLE_NAME_OUTPUT: table_name}



    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Census Connect'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CensusConnectAlgorithm()
