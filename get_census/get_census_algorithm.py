# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CensusConnect
                                 A QGIS plugin
 This plugin downloads and joins census attribute data with census spatial data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-02-27
        copyright            : (C) 2022 by Friendly Widgetmakers Society
        email                : stephen.francisco@temple.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Friendly Widgetmakers Society'
__date__ = '2022-02-27'
__copyright__ = '(C) 2022 by Friendly Widgetmakers Society'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsVectorLayer,
                       QgsVectorFileWriter,
                       QgsProject,
                       QgsVectorLayerJoinInfo,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterString,
                       QgsProcessingOutputString,
                       Qgis
                       )
from qgis.utils import iface
from qgis import processing
#from cc_functions import fetchZip, get_geo

import os
import pandas as pd
import requests
from csv import QUOTE_NONNUMERIC
import urllib.request, urllib.error, urllib.parse


class CensusConnectAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    
    
    EXTENT_PARAM = 'EXTENT_PARAM'
    EXTENT_OUTPUT = 'EXTENT_OUTPUT'
    
    LEVEL_PARAM = 'LEVEL_PARAM'
    LEVEL_OUTPUT = 'LEVEL_OUTPUT'
    
    TABLE_PARAM = 'TABLE_PARAM'
    TABLE_OUTPUT = 'TABLE_OUTPUT'
    
    YEAR_PARAM = 'YEAR_PARAM'
    YEAR_OUTPUT = 'YEAR_OUTPUT'
    
    # ultimately this list(s) (or dict) needs to be populated by the census API
    EXTENT = ['Alabama',
    'Alaska',
    'Arizona',
    'Arkansas',
    'California',
    'Colorado',
    'Connecticut',
    'Delaware',
    'Florida',
    'Georgia',
    'Hawaii',
    'Idaho',
    'Illinois',
    'Indiana',
    'Iowa',
    'Kansas',
    'Kentucky',
    'Louisiana',
    'Maine',
    'Maryland',
    'Massachusetts',
    'Michigan',
    'Minnesota',
    'Mississippi',
    'Missouri',
    'Montana',
    'Nebraska',
    'Nevada',
    'New Hampshire',
    'New Jersey',
    'New Mexico',
    'New York',
    'North Carolina',
    'North Dakota',
    'Ohio',
    'Oklahoma',
    'Oregon',
    'Pennsylvania',
    'Rhode Island',
    'South Carolina',
    'South Dakota',
    'Tennessee',
    'Texas',
    'Utah',
    'Vermont',
    'Virginia',
    'Washington',
    'West Virginia',
    'Wisconsin',
    'Wyoming',
    'American Samoa',
    'Guam',
    'Northern Mariana Islands',
    'Puerto Rico',
    'Virgin Islands']
    EXTENT_RESPONSE = ['01','02','04','05','06','08','09','10','12','13','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','44','45','46','47','48','49','50','51','53','54','55','56','60','66','69','72','78']
    
    YEAR = ['2000','2010']
    YEAR_RESPONSE = ['2000','2010']
    
    LEVEL = ['All Counties', 'All Census Tracts']
    LEVEL_RESPONSE = ['county', 'tract']
    

    def initAlgorithm(self, config=None):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        ##### where do we unzip files?
        ##### load tabular data in format that is joinable (csv?)
        ##### remove second row of tabular data (descriptions)
        ##### make sure GEOID column is correct data type and
        #####remove unnecessary zeros
        ##### load geometry shapefile      
        
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.EXTENT_PARAM,
                description="Choose a Geographic Extent",
                options=self.EXTENT
            )
        )
        
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.LEVEL_PARAM,
                description="Choose a Geographic level",
                options=self.LEVEL
            )
        )
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.YEAR_PARAM,
                description="Choose a Year",
                options=self.YEAR
            )
        )
        
        self.addParameter(
            QgsProcessingParameterString(
                name=self.TABLE_PARAM,
                description="Enter your census table number",
            )
        )
        
    
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
    
        """
        
        os.chdir(QgsProject.instance().readPath("./"))
        project_home = os.getcwd()
        
        extent = self.EXTENT_RESPONSE[self.parameterAsInt(parameters, self.EXTENT_PARAM, context)]
        level = self.LEVEL_RESPONSE[self.parameterAsInt(parameters, self.LEVEL_PARAM, context)]  
        table = self.parameterAsString(parameters, self.TABLE_PARAM, context)
        year = self.YEAR_RESPONSE[self.parameterAsInt(parameters, self.YEAR_PARAM, context)]
        
       
        def get_table(get_vars, pred_for, pred_in, year):
            HOST = "https://api.census.gov/data"
            year = f"{year}"
            dataset = "dec/sf1"
            base_url = "/".join([HOST, year, dataset])
            predicates = {}
            predicates["get"] = ",".join(get_vars)  # get vars is a list of strings, ex. ["NAME", "P001001"]
            predicates["for"] = f"{pred_for}:*" #county:* or tract:*
            predicates["in"] = f"state:{pred_in}" #state:42 or state:*
            r = requests.get(base_url, params=predicates)
            col_names = r.json()[0:1][0]
            df = pd.DataFrame(columns=col_names, data=r.json()[1:])   
            geocols = list(df.columns)[len(get_vars):] 
            df["GEOID"] = df[geocols].apply("".join, axis=1)    
            df.to_csv("table.csv", quoting = QUOTE_NONNUMERIC, index=False)
            out_file = open("table.csvt", "w")
            csvt_text = '"Integer",' * len(get_vars) + '"String",' * (len(geocols)) + '"String"'
            out_file.write(csvt_text)
            out_file.close()
            return df

        df = get_table([table], level, extent, year)

        csv = QgsVectorLayer(r'file:///' + project_home + '\\table.csv', 'table', 'delimitedtext')
        QgsProject.instance().addMapLayer(csv)


        def fetchZip(url, project_home):
            '''Fetch binary web content located at 'url'
            and write it in the output directory'''
            response = urllib.request.urlopen(url)
            binContents = response.read()
            response.close()

            # Save zip file to output dir (write it in 'wb' mode).
            outFileName = project_home + os.path.basename(url)
            with open(outFileName, 'wb') as outf:
                outf.write(binContents)
            

        def get_geo(geo_level, year, state):

            url_prefix="https://www2.census.gov/geo/tiger/" #Not User Input
            url_tiger= "TIGER{}".format(year)           # "TIGER####"
            url_geo_level = geo_level.upper()    # "COUNTY", "STATE", etc. 
            url_year = year            # "####"
            url_state = state          #2-dig state code
            url_geo_lower = geo_level + f"{year[2:]}" #used in url_suffix (file name)
            url_suffix="tl_{0}_{1}_{2}.zip".format(url_year,url_state,url_geo_lower)
            shp_join_field='GEOID{}'.format(year[2:])
            #not sure if this needs to be global for future referance
            geo_url = "{0}{1}/{2}/{3}/{4}".format(url_prefix, url_tiger, url_geo_level, url_year, url_suffix)
            #STATE ex: https://www2.census.gov/geo/tiger/TIGER2010/STATE/2010/tl_2010_01_state10.zip
            #theURL = 'https://www2.census.gov/geo/tiger/TIGER2010/COUNTY/2010/tl_2010_42_county10.zip' #original grab
            
            fetchZip(geo_url, project_home) #change to geo_url once user input final
            print('{0}{1} created.'.format(project_home, os.path.basename(geo_url)))
            return geo_url, url_suffix, shp_join_field
            print("FOR GIT HUB TO RECOGNIZE AS UPDATED TEXT DELTE LATER")


        geo_url, url_suffix, shp_join_field  = get_geo(level, year, extent)

        # iface.messageBar().pushMessage("Error", geo_url, level=Qgis.Critical)
        # iface.messageBar().clearWidgets()


        #add shapefile to QGIS project
        #let's generalize this more, and turn into a function (
        zip_path = '/vsizip/' + project_home + os.path.basename(geo_url)
        shp = QgsVectorLayer(zip_path, url_suffix, 'ogr')
        QgsProject.instance().addMapLayer(shp)

        shp_join_field='GEOID10'

        #make a function to join csv to shapefile
        def join_to_geog (shp, csv, shp_join_field):   
            joinObject=QgsVectorLayerJoinInfo()
            joinObject.setJoinFieldName("GEOID")
            joinObject.setTargetFieldName(shp_join_field)
            joinObject.setJoinLayerId(csv.id())
            joinObject.setUsingMemoryCache(True)
            joinObject.setJoinLayer(csv)
            shp.addJoin(joinObject)

        join_to_geog(shp, csv, shp_join_field)
                
        return {self.EXTENT_OUTPUT: extent, self.LEVEL_OUTPUT: level, self.TABLE_OUTPUT: table, self.YEAR_OUTPUT: year}



    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Census Connect'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CensusConnectAlgorithm()
